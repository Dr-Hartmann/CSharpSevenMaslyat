@* @page "/documentv1s/delete"
@using MVPv4.Data
@using MVPv4.Models
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<MVPv4Context> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>DocumentV1</h2>
    <hr />
    @if (documentv1 is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@documentv1.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">File</dt>
            <dd class="col-sm-10">@documentv1.File</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Year</dt>
            <dd class="col-sm-10">@documentv1.Year</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Title</dt>
            <dd class="col-sm-10">@documentv1.Title</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Topic</dt>
            <dd class="col-sm-10">@documentv1.Topic</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Annotation</dt>
            <dd class="col-sm-10">@documentv1.Annotation</dd>
        </dl>
        <EditForm method="post" Model="documentv1" OnValidSubmit="DeleteDocumentV1" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(documentv1 is null)">Delete</button> |
            <a href="/documentv1s">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private DocumentV1? documentv1;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        documentv1 = await context.DocumentV1.FirstOrDefaultAsync(m => m.Id == Id);

        if (documentv1 is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteDocumentV1()
    {
        using var context = DbFactory.CreateDbContext();
        context.DocumentV1.Remove(documentv1!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/documentv1s");
    }
}
 *@