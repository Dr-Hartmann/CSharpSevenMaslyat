@page "/"


<PageTitle>Login/Register</PageTitle>

@if (currentId == "register")
{
	<PageTitle>Register</PageTitle>
	<!-- Register markup -->
	@* Ошибки *@
	@if (errors.Length > 0)
	{
		<div class="alert alert-danger">
			<ul>
				@foreach (var err in errors)
				{
					<li>@err</li>
				}
			</ul>
		</div>
	}
	<login-menu>
		<div class="login-back">

			<div class="login-main">

				@* Навигация *@
				<p>
					<a class="button-login" href="?id=login">Вход</a>
					<a class="button-register active" href="?id=register">Регистрация</a><br>
				</p>

				@* Поля *@
				<p>	<input class="input-format-login" @bind="email" placeholder="Email" /></p>
				<p><input class="input-format-password" @bind="password" placeholder="Пароль" /> </p>
				<p><input class="input-format-password" @bind="ConfirmPassword" placeholder="Подтвердите пароль" /> </p>


				@* Кнопки *@

				<button class="button-enter active" @onclick="RegUserAsync">Зарегистрироваться</button>
			</div>
		</div>
	</login-menu>

}
else
{
	<PageTitle>Login</PageTitle>
	<!-- Login markup -->
	<login-menu>
		<div class="login-back">
			<div class="login-main">
				@if (!string.IsNullOrWhiteSpace(error))
				{
					<div class="alert alert-danger">@error</div>
				}
				<p>
					<a class="button-login active" href="?id=login">Вход</a>
					<a class="button-register" href="?id=register">Регистрация</a>
				</p>
				<p><input class="input-format-login" @bind="email" placeholder="Email" /> </p>
				<p><input class="input-format-password" @bind="password" placeholder="Password" /> </p>
				<button class="button-enter" @onclick="LoginAsync">Войти</button>
				<button class="button-guest active" @onclick="NavigateToEditor">Войти как гость</button>
			</div>
		</div>
	</login-menu>

}


@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthenticationStateProvider provider
@implements IDisposable
@code {
	private string currentId = "login";

	// читаем параметр id
	private void UpdateCurrentId()
	{
		var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
		var query = QueryHelpers.ParseQuery(uri.Query);

		if (query.TryGetValue("id", out var idValue) && !string.IsNullOrWhiteSpace(idValue))
		{
			currentId = idValue!;
		}
		else
		{
			currentId = "login";
		}
	}

	protected override void OnInitialized()
	{
		Navigation.LocationChanged += OnLocationChanged;
		UpdateCurrentId();
	}

	private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
	{
		UpdateCurrentId();
		StateHasChanged(); // Обновление UI
	}

	public string email = "";
	public string password = "";
	public string ConfirmPassword = "";
	public string error = "";
	public string[] errors = [];

	private void NavigateToEditor() => Navigation.NavigateTo("/Editor");

	private async Task LoginAsync()
	{
		var authStateProvider = (AuthStateProvider)provider;
		var formResult = await authStateProvider.LoginAsync(email, password);
		if (formResult.Succeeded)
			Navigation.NavigateTo("/Editor");
		else
			error = formResult.Errors[0];
	}

	private async Task RegUserAsync()
	{
		if (password != ConfirmPassword)
		{
			errors = ["Пароли не совпадают!"];
			return;
		}

		var authStateProvider = (AuthStateProvider)provider;
		var resp = await authStateProvider.RegisterAsync(new RegisterDTO { Email = email, Password = password });
		if (resp.Succeeded)
			Navigation.NavigateTo("/");
		else
			errors = resp.Errors;
	}

	public void Dispose()
	{
		Navigation.LocationChanged -= OnLocationChanged;
	}
}
