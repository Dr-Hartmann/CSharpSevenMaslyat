@* @using Microsoft.AspNetCore.Authorization
@attribute [Authorize] *@


<div class="login-menu">
    <div class="login-back">
        <div class="login-main">
            <button class="@GetLoginButtonClass()" @onclick="ToLog">Вход</button>
            <button class="@GetRegisterButtonClass()" @onclick="ToReg">Регистрация</button>
            <EditForm method="post" Model="createdUser" OnValidSubmit="Register" FormName="registration" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert" />
                <br />
                @if (currentPage == "registration")
                {
                    <div class="mb-3">
                        <InputText id="nickname" @bind-Value="createdUser.Nickname" class="form-control input-format" placeholder="Никнейм" />
                        <ValidationMessage For="() => createdUser.Nickname" class="text-danger-override" />
                    </div>
                }
                <div class="mb-3">
                    <InputText id="login" @bind-Value="createdUser.Login" class="form-control input-format" aria-required="true" placeholder="Логин" />
                    <ValidationMessage For="() => createdUser.Login" class="text-danger-override" />
                </div>
                <div class="mb-3">
                    <InputText id="password" @bind-Value="createdUser.Password" class="form-control input-format" placeholder="Пароль" />
                    <ValidationMessage For="() => createdUser.Password" class="text-danger-override" />
                </div>
                @if (currentPage == "registration")
                {
                    <InputText id="password" @bind-Value="createdUser.PasswordConfirm" class="form-control input-format" placeholder="Подтверждение пароля" />
                    <ValidationMessage For="() => createdUser.PasswordConfirm" class="text-danger-override" />
                }
                <br />
                @if (currentPage == "login")
                {
                    <button type="submit" class="btn btn-primary button-enter">Войти</button>
                    <button class="button-guest active" @onclick="EnterLikeGuest">Войти как гость</button>
                }
                else if (currentPage == "registration")
                {
                    <button type="submit" class="btn btn-primary button-enter" @onclick="Register">Зарегистрироваться</button>
                }
            </EditForm>
        </div>
    </div>
</div>



@inject NavigationManager NavigationManager
@inject HttpClient httpClient
@using MVPv5.Application.Contracts.User.v1
@using MVPv5.Core.Models
@code {

    [Parameter]
    public string? currentPage { get; set; }

    UserCreateRequest createdUser { get; set; } = new();

    // [Parameter]
    // public EventCallback<UserCreateRequest> OnDataChanged { get; set; }
    // await OnDataChanged.InvokeAsync(NewUser);



    private string GetLoginButtonClass()
    {
        return currentPage == "login" ? "button-login active" : "button-login";
    }

    private string GetRegisterButtonClass()
    {
        return currentPage == "registration" ? "button-register active" : "button-register";
    }

    private async Task Register()
    {
        var token = new CancellationTokenSource(10000);
        var response = await httpClient.PostAsJsonAsync("v1/User/Create", createdUser, token.Token);

        if (!response.IsSuccessStatusCode)
        {
            //TODO - вывод сообщения об ошибке на экран
            return;
        }

        NavigationManager.NavigateTo("/editor");
    }

    private void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        currentPage = NavigationManager.ToAbsoluteUri(e.Location).PathAndQuery;
        StateHasChanged();
    }

    private void EnterLikeGuest()
    {
        // TODO - создание клиента-гостя с низким уровнем привелегий
        NavigationManager.NavigateTo("/editor");
    }

    private void Register(EditContext args)
    {
        throw new NotImplementedException();
    }

    private void ToLog() => NavigationManager.NavigateTo("/login");
    private void ToReg() => NavigationManager.NavigateTo("/registration");
}
