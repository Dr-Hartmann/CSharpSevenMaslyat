@page "/download"
@inject NavigationManager Navigation

<InputFile OnChange="HandleFileSelected" />
<p>@statusMessage</p>
<p>!!! @status !!!</p>


<ul>
    @foreach (var file in files)
    {
        <li>
            @file.id
            @file.name
            <button @onclick="() => DownloadFile(file)">Скачать</button>
        </li>
    }
</ul>


@code {
    @using MVPv5.Application.Contracts.Template.v1;

    private string? statusMessage;
    private string? status;

    private List<TemplateReadResponse> files = new();

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file == null) return;

            using var stream = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(stream);

            var response = await httpClient.PostAsJsonAsync("template/create", new TemplateCreateRequest()
                {
                    Name = file.Name,
                    Type = "курсач",
                    Content = stream.ToArray(),
                    ContentType = file.ContentType,
                    Tags = new List<string> { "{{name}}", "{{teacher}}" }
                },
                new CancellationTokenSource(5000).Token);

            if (!response.IsSuccessStatusCode)
            {
                statusMessage = await response.Content.ReadAsStringAsync();
                return;
            }

            statusMessage = "Файл успешно загружен в базу данных!";
        }
        catch(Exception ex)
        {
            status = ex.Message;
        }

        await OnInitializedAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        var response = await httpClient.GetFromJsonAsync<IEnumerable<TemplateReadResponse>>("Template/read-all");

        if (!response.TryGetNonEnumeratedCount(out var a))
        {
            statusMessage = "Ошибка";
            return;
        }

        files = new(response!);
    }

    private async Task DownloadFile(TemplateReadResponse file)
    {
    @inject IJSRuntime JS
        await JS.InvokeVoidAsync("downloadFromByteArray", new
        {
            byteBase64 = Convert.ToBase64String(file.content!),
            fileName = file.name,
            mimeType = "application/octet-stream"
        });
    }
    // Navigation.NavigateTo("/v1/Template/download", forceLoad: true);
}
