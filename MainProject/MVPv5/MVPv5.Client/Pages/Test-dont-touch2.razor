@page "/download"

<InputFile OnChange="HandleFileSelected" />
<p>@statusMessage</p>
<p>!!! @status !!!</p>


<ul>
    @foreach (var file in files)
    {
        <li>
            @file.Id
            @file.Name
            <button @onclick="() => DownloadFile(file)">Скачать</button>
            @* <button @onclick="() => BuildAndDownloadFile(file)">Собрать и скачать</button> *@
        </li>
    }
</ul>


@using MVPv5.Application.Contracts.Document.v1
@code {
    @using MVPv5.Application.Contracts.Template.v1;

    private string? statusMessage;
    private string? status;

    private List<TemplateReadResponse> files = new();

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file == null) return;

            using var stream = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(stream);

            var response = await httpClient.PostAsJsonAsync("template/create", new TemplateCreateRequest()
                {
                    Name = file.Name,
                    Type = "курсач",
                    Content = stream.ToArray(),
                    ContentType = file.ContentType,
                    Tags = new List<string> { "{{name}}", "{{teacher}}" }
                },
                new CancellationTokenSource(5000).Token);

            if (!response.IsSuccessStatusCode)
            {
                statusMessage = await response.Content.ReadAsStringAsync();
                return;
            }

            statusMessage = "Файл успешно загружен в базу данных!";
        }
        catch (Exception ex)
        {
            status = ex.Message;
        }

        await OnInitializedAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        var response = await httpClient.GetFromJsonAsync<IEnumerable<TemplateReadResponse>>("Template/read-all");

        if (!response!.TryGetNonEnumeratedCount(out var a))
        {
            statusMessage = "Ошибка";
            return;
        }

        files = new(response!);
    }

    @inject IJSRuntime JS
    private async Task DownloadFile(TemplateReadResponse file)
    {
        await JS.InvokeVoidAsync("downloadFromByteArray", new
        {
            byteBase64 = Convert.ToBase64String(file.Content!),
            fileName = file.Name,
            mimeType = "application/octet-stream"
        });
    }

    // private async Task BuildAndDownloadFile(TemplateReadResponse file)
    // {
    //     Dictionary<string, string> values = new() {
    //         {"{{institute}}", "Институт информационных технологий" },
    //         {"{{faculty}}", "МПО ЭВМ" },
    //         {"{{type}}", "КУРСОВАЯ РАБОТА" },
    //         { "{{class}}", "С#-программирование" },
    //         { "{{plot}}", "Blazor, Rest API, Entity Framework, PostrgreSQL, сериализация, работа с файлами"},
    //         { "{{group}}", "1ПИб-02-1оп-22" },
    //         {"{{code}}", "09.03.04" },
    //         {"{{specialization}}", "Программная инженерия" },
    //         {"{{fullname}}", "Микуцких Григорий Андреевич" },
    //         {"{{teacher}}", "Шаханов Н.И." },
    //         {"{{position}}", "доцент"},
    //         { "{{year}}", "2025"},
    //         { "{{annotation}}", $"Курсовая работа посвящена (SOME TEXT) разработке...\r\nВ ходе работы было ...\r\nВ работе присутствует введение в предметную область, …, сопровождение графическим материалом и диаграммами, код итоговой программы и результаты её тестирования."}
    //     };

    //     var response = await httpClient.PostAsJsonAsync("document/build-document",
    //         new DocumentBuildRequest()
    //             {
    //                 Name = file.Name!,
    //                 Content = file.Content!,
    //                 Data = values
    //             });

    //     if (!response.IsSuccessStatusCode) return;

    //     var rep = await response.Content.ReadFromJsonAsync<DocumentBuildResponse>();

    //     await JS.InvokeVoidAsync("downloadFromByteArray", new
    //     {
    //         byteBase64 = Convert.ToBase64String(rep!.Content!),
    //         fileName = rep.Name,
    //         mimeType = "application/octet-stream"
    //     });
    // }
}