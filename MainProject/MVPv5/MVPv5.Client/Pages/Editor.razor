@page "/editor"
@using System.Text
@using MVPv5.Application.Contracts.Document.v1
<PageTitle>Editor</PageTitle>
<UpperToolbar />
<UpperPanel >
	<PanelElements />  <!-- Передаем делегат сюда -->
</UpperPanel>

@* <div id="editor-container" style="overflow-y:auto; height: 100vh; background: #eee;">
	@foreach (var page in Pages)
	{
		<div @ref="page.ElementRef" class="docpage" contenteditable="true" @oninput="CheckOverflow">
			<div>@(page.Content)</div>
		</div>
	}
</div> *@
<div>
	@foreach (var input in Inputs)
	{
		<textarea type="text" class="inputTextarea" @bind="input.Value" />
	}

	<button @onclick="AddInput" class="btn btn-primary">Добавить поле</button><button @onclick="Remove" class="btn btn-primary">Удалить</button>
</div>
<div class="buttons"><button @onclick="Add">+</button> <button>-</button></div>
@code {
@inject HttpClient httpClient
	@inject NavigationManager NavigationManager
	private int incr { get; set; } = 0;
	private int flag { get; set; } = 0;
	private List<InputModel> Inputs { get; set; } = new();

	class PageModel
	{
		public string Content { get; set; } = "";
		public ElementReference ElementRef { get; set; }
	}
	private void Add()
	{
		incr++;
	}
	private class InputModel
	{
		public string Value { get; set; }
	}
	private void AddInput()
	{
		Inputs.Add(new InputModel());
	}
	private void Remove()
	{
		Inputs.Remove(Inputs[Inputs.Count()-1]);
	}
	// List<PageModel> Pages = new() { new PageModel() };

	// [Inject] IJSRuntime? JS { get; set; }

	// async Task CheckOverflow(ChangeEventArgs e)
	// {
	// 	var lastPage = Pages.Last();
	// 	bool isOverflowing = await JS!.InvokeAsync<bool>("checkPageOverflow", lastPage.ElementRef);

	// 	if (isOverflowing)
	// 	{
	// 		Pages.Add(new PageModel());
	// 		StateHasChanged(); // Ререндерим компонент
	// 	}
	// }

	// protected override void OnInitialized()
	// {
	// 	var doc = GetDocumentCreateRequest.JsonData;
	// 	Pages[0].Content = doc;
	// }

	// public async Task saveDoc()
	// {
	// 	// userDoc = Pages[0].Content;
	// 	var page = Pages[0];
	// 	string content = await JS!.InvokeAsync<string>("getContent", page.ElementRef);
	// 	page.Content = content;
	// 	//text to bytes
	// 	byte[] bytes = Encoding.UTF8.GetBytes(content);
	// 	foreach (byte b in bytes)
	// 	{
	// 		Console.WriteLine(b);
	// 	}
	// 	//bytes to string
	// 	string? textFromByte = null;

	// 	textFromByte += Encoding.UTF8.GetString(bytes);
	// 	Console.WriteLine(textFromByte);
	// }
	string? userDoc = null;

	DocumentCreateRequest GetDocumentCreateRequest { get; set; } = new DocumentCreateRequest { Name = "FirstDoc", TemplateId = 0 };
}
