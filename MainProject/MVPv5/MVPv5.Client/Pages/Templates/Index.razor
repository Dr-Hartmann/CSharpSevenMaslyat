@page "/templates"
<PageTitle>Шаблоны</PageTitle>


@if (Searching is null)
{
    <p><em>@Status</em></p>
}
else
{
    @using Microsoft.AspNetCore.Components.QuickGrid
    <QuickGrid Class="table" Items="Searching" Pagination="pagination">
        <PropertyColumn Property="m => m.Id" Title="Id" Sortable="true" />
        <PropertyColumn Property="m => m.Name" Title="Название" Sortable="true" />
        <PropertyColumn Property="m => m.Type" Title="Тип работы" Sortable="true" />

        <TemplateColumn Context="p">
            <div style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                <a href="@($"templates/edit?id={p.Id}")">Детали</a>
            </div>
        </TemplateColumn>

        <Paginator State="pagination" />
    </QuickGrid>
}


@using MVPv5.Application.Contracts.Template.v1
@inject HttpClient httpClient
@code {
    private string? Status { get; set; } = "Загрузка...";
    private IQueryable<TemplateReadResponse>? Searching { get; set; }

    static int size = 10;
    PaginationState pagination = new PaginationState { ItemsPerPage = size };

    protected override void OnParametersSet()
    {
        pagination = new PaginationState { ItemsPerPage = Searching!.Count() < 10 ? Searching!.Count() : size };
    }

    protected override async Task OnInitializedAsync()
    {
        var response = await httpClient.GetAsync("Template/read-all");
        if (response.IsSuccessStatusCode)
        {
            Searching = (await response.Content.ReadFromJsonAsync<IEnumerable<TemplateReadResponse>>())!.AsQueryable();
        }
        else
        {
            Status = "Не получилось загрузить файлы\n" + await response.Content.ReadAsStringAsync();
            return;
        }
    }
}
