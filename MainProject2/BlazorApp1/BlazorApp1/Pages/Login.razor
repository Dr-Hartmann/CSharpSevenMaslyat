@page "/"
@using BlazorApp1.Login

@inject NavigationManager Navigation
@inject NavigationManager NavigationManager

<PageTitle>Enterance</PageTitle>

@if (currentId == "register")
{
    <PageTitle>Register</PageTitle>
    <login-menu>
        <div class="login-back">
            <div class="login-main">
                <p>
                    <button class="button-login" @onclick="Log">Вход</button>
                    <button class="button-register active" @onclick="Reg">Регистрация</button>
                    <br>
                </p>
                <br>
                <p><br><label class="label-format">Логин</label><input class="input-format-login" @bind="login"/><br></p>
                <p><label class="label-format">Пароль</label><input class="input-format-password" /><br></p>
                <br>
                <br>
                <p><button class="button-enter">Зарегистрироваться</button></p>
            </div>
        </div>
    </login-menu>
}
else if (currentId == "login")
{
    <PageTitle>Login</PageTitle>
    <login-menu>
        <div class="login-back">
            <div class="login-main">
                <p>
                    <button class="button-login active" @onclick="Log">Вход</button>
                    <button class="button-register" @onclick="Reg">Регистрация</button>
                    <br>
                </p>
                <br>
                <p><br><label class="label-format">Логин</label><input class="input-format-login" /><br></p>
                <p><label class="label-format">Пароль</label><input class="input-format-password" /><br></p>
                <br>
                <br>
                <p><button class="button-enter">Войти</button></p>
                <p><button class="button-guest active" @onclick="NavigateToEditor">Войти как гость</button></p>
            </div>
        </div>
    </login-menu>
}

@code {
    private string currentId { get; set; } = "login"; // Значение по умолчанию
    private string login { get; set; } = "";
    protected override async Task OnInitializedAsync()
    {
        // Получаем параметры из URL
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("id", out var idValue))
        {
            currentId = idValue.FirstOrDefault() ?? "login"; // Используем значение из URL или значение по умолчанию
        }
        else
        {
            // Если параметра 'id' нет, устанавливаем значение по умолчанию и перенаправляем
            NavigationManager.NavigateTo("?id=login", replace: true);
        }

        await base.OnInitializedAsync();
    }

    private void UpdateUrl()
    {
        var uri = new Uri(Navigation.Uri);
        var baseUri = uri.GetLeftPart(UriPartial.Path);
        var newUri = $"{baseUri}?id={currentId}";
        Navigation.NavigateTo(newUri);
    }

    private void Reg()
    {
        currentId = "register";
        UpdateUrl();
    }

    private void Log()
    {
        currentId = "login";
        UpdateUrl();
    }
    private void NavigateToEditor()
    {
        NavigationManager.NavigateTo("/Editor");
    }
    private void Show()
    {
        Console.Write(login);
    }
}
